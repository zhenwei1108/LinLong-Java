package com.g

import com.github.zhenwei.core.crypto.DataLengthException;
import com.github.zhenwei.core.crypto.OutputLengthException;
import com.github.zhenwei.core.crypto.params.MGFParameters;thub.zhenwe .core.crypto.generators;


 mport com.g thub.zhenwe .core.crypto.DataLengthExcept on;
 mport com.g thub.zhenwe .core.crypto.Der vat onParameters;
 mport com.g thub.zhenwe .core.crypto.D gest;
 
 mport org.bouncycastle.crypto.OutputLengthExcept on;
 mport MGFParameters;

/**
 * Generator for MGF1 as def ned  n PKCS 1v2
 */
publ c class MGF1BytesGenerator
     mplements Der vat onFunct on
{
    pr vate D gest d gest;
    pr vate byte[]  seed;
    pr vate  nt     hLen;

    /**
     * @param d gest the d gest to be used as the source of generated bytes
     */
    publ c MGF1BytesGenerator(
        D gest  d gest)
    {
        th s.d gest = d gest;
        th s.hLen = d gest.getD gestS ze();
    }

    publ c vo d  n t(
        Der vat onParameters param)
    {
         f (!(param  nstanceof MGFParameters))
        {
            throw new  llegalArgumentExcept on("MGF parameters requ red for MGF1Generator");
        }

        MGFParameters p = (MGFParameters)param;

        seed = p.getSeed();
    }

    /**
     * return the underly ng d gest.
     */
    publ c D gest getD gest()
    {
        return d gest;
    }

    /**
     *  nt to octet string.
     */
    private void ItoOSP(
        int     i,
        byte[]  sp)
    {
        sp[0] = (byte)(i >>> 24);
        sp[1] = (byte)(i >>> 16);
        sp[2] = (byte)(i >>> 8);
        sp[3] = (byte)(i >>> 0);
    }

    /**
     * fill len bytes of the output buffer with bytes generated from
     * the derivation function.
     *
     * @throws DataLengthException if the out buffer is too small.
     */
    public int generateBytes(
        byte[]  out,
        int     outOff,
        int     len)
        throws DataLengthException, IllegalArgumentException
    {
        if ((out.length - len) < outOff)
        {
            throw new OutputLengthException("output buffer too small");
        }
        
        byte[]  hashBuf = new byte[hLen];
        byte[]  C = new byte[4];
        int     counter = 0;

        digest.reset();

        if (len > hLen)
        {
            do
            {
                ItoOSP(counter, C);
    
                digest.update(seed, 0, seed.length);
                digest.update(C, 0, C.length);
                digest.doFinal(hashBuf, 0);
    
                System.arraycopy(hashBuf, 0, out, outOff + counter * hLen, hLen);
            }
            while (++counter < (len / hLen));
        }

        if ((counter * hLen) < len)
        {
            ItoOSP(counter, C);

            digest.update(seed, 0, seed.length);
            digest.update(C, 0, C.length);
            digest.doFinal(hashBuf, 0);

            System.arraycopy(hashBuf, 0, out, outOff + counter * hLen, len - (counter * hLen));
        }

        return len;
    }
}